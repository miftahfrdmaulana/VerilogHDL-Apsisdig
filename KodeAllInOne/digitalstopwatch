// Digital Stopwatch RTL
module digital_stopwatch (
    input clk,             // 50 MHz clock
    input reset_btn,       // Reset button
    input start_stop_btn,  // Start/Stop button
    output [6:0] sec_ones_display, // 7-segment display for ones digit
    output [6:0] sec_tens_display  // 7-segment display for tens digit
);
    wire clk_1hz;
    wire enable;
    wire reset;
    wire [3:0] sec_ones;
    wire [3:0] sec_tens;
    
    // Clock Divider: Divide 50 MHz clock to 1 Hz
    reg [25:0] counter;
    reg clk_out;
    always @(posedge clk or posedge reset_btn) begin
        if (reset_btn) begin
            counter <= 0;
            clk_out <= 0;
        end else if (counter == 24999999) begin
            counter <= 0;
            clk_out <= ~clk_out;
        end else begin
            counter <= counter + 1;
        end
    end
    assign clk_1hz = clk_out;

    // Control Logic: Handle start/stop and reset
    reg enable_reg;
    always @(posedge clk) begin
        if (reset_btn) begin
            enable_reg <= 0;
        end else if (start_stop_btn) begin
            enable_reg <= ~enable_reg;
        end
    end
    assign enable = enable_reg;
    assign reset = reset_btn;

    // Counter: Count seconds in BCD format
    reg [3:0] ones;
    reg [3:0] tens;
    always @(posedge clk_1hz or posedge reset) begin
        if (reset) begin
            ones <= 0;
            tens <= 0;
        end else if (enable) begin
            if (ones == 9) begin
                ones <= 0;
                if (tens == 5)
                    tens <= 0;
                else
                    tens <= tens + 1;
            end else begin
                ones <= ones + 1;
            end
        end
    end
    assign sec_ones = ones;
    assign sec_tens = tens;

    // 7-Segment Display Decoder for ones digit
    reg [6:0] seg_ones;
    always @(*) begin
        case (sec_ones)
            4'd0: seg_ones = 7'b1000000;
            4'd1: seg_ones = 7'b1111001;
            4'd2: seg_ones = 7'b0100100;
            4'd3: seg_ones = 7'b0110000;
            4'd4: seg_ones = 7'b0011001;
            4'd5: seg_ones = 7'b0010010;
            4'd6: seg_ones = 7'b0000010;
            4'd7: seg_ones = 7'b1111000;
            4'd8: seg_ones = 7'b0000000;
            4'd9: seg_ones = 7'b0010000;
            default: seg_ones = 7'b1111111;
        endcase
    end
    assign sec_ones_display = seg_ones;

    // 7-Segment Display Decoder for tens digit
    reg [6:0] seg_tens;
    always @(*) begin
        case (sec_tens)
            4'd0: seg_tens = 7'b1000000;
            4'd1: seg_tens = 7'b1111001;
            4'd2: seg_tens = 7'b0100100;
            4'd3: seg_tens = 7'b0110000;
            4'd4: seg_tens = 7'b0011001;
            4'd5: seg_tens = 7'b0010010;
            default: seg_tens = 7'b1111111;
        endcase
    end
    assign sec_tens_display = seg_tens;

endmodule
